syntax = "proto3";

option go_package = ".;api";

package pipeline;

import "google/protobuf/struct.proto";

message PipelinesCreateRequest {
    Pipelines pipelines = 1;
}

message PipelinesCreateResponse {
    string response = 1;
}

service ConfigBuilder {
    rpc Create(PipelinesCreateRequest) returns (PipelinesCreateResponse) {
    }
}

enum ProcessType {
    UnknownProcess = 0;
    AnnotatorProcess = 1;
    AggregatorProcess = 2;
    CompleterProcess = 3;
    FilterProcess = 4;
    SpawnerProcess = 5;
    TeeProcess = 6;
    TransformerProcess = 7;
    ContinuationProcess = 8;
}

enum ExternalType {
    ExternalUnknown = 0;
    ExternalKVStore = 1;
    ExternalObjectStore = 2;
    ExternalPubSub = 3;
    ExternalHttp = 4;
    ExternalLocalFile = 5;
}

enum AggregationType {
    AggUnknown = 0;
    AggSum = 1;
    AggMax = 2;
    AggMin = 3;
    AggAvg = 4;
    AggCount = 5;
    AggDiscreteHistogram = 6;
}

enum TransformationType {
    TransformUnknown = 0;
    TransformSum = 1;
    TransformCopy = 2;
    TransformMapRegex = 3;
    TransformMapAdd = 4;
    TransformMapMult = 5;
    TransformCount = 6;
    TransformLeftFold = 7;
    TransformRightFold = 8;
    TransformMap = 9;
}

enum OperatorType {
    UnknownType = 0;
    UnaryType = 1;
    BinaryType = 2;
    LogicalType = 3;
    ComparatorType = 4;
    ExistsType = 5;
}

enum ExistsOperator {
    UnknownExists = 0;
    Exists = 1;
    NotExists = 2;
}

enum UnaryOperator {
    UnknownUnary = 0;
    Negation = 3;
    Inversion = 4;
    LogicalNot = 5;
}

enum BinaryOperator {
    UnknownBinary = 0;
    Addition = 6;
    Subtract = 7;
    Multiply = 8;
    Divide = 9;
    Power = 10;
    Modulus = 11;
    RightShift = 12;
    LeftShift = 13;
    Or = 14;
    And = 15;
    Xor = 16;
}

enum LogicalOperator {
    UnknownLogical = 0;
    LogicalAnd = 17;
    LogicalOr = 18;
}

enum ComparatorOperator {
    UnknownComparator = 0;
    GreaterThan = 19;
    LessThan = 20;
    GreaterThanOrEqual = 21;
    LessThanOrEqual = 22;
    Equal = 23;
    NotEqual = 24;
    RegexMatch = 25;
    RegexNotMatch = 26;
}

message ProcessInstrumentation {
    bool enableTracing = 1;
    bool latency = 2;
    bool counter = 3;
}

message Pipelines {
    string partitionUuid = 1;

    repeated Pipeline pipelines = 2;
    repeated ProcessDefinition processDefinitions = 3;
    repeated External externalSystems = 4;
}

message Pipeline {
    string name = 1;
    repeated PipelineProcess processes = 2;
    Checkpoint checkpoint = 3;
    bool enableTracing = 4;
    bool enableMetrics = 5;
}

message RetryStrategy {
    int32 numRetries = 1;
    int64 initialBackOffMs = 2;
}

message PipelineProcess {
    string name = 1;
    RetryStrategy retryStrategy = 2;
    ProcessInstrumentation instrumentation = 3;
}

message ProcessDefinition {
    oneof processDefinition {
        Annotator annotator = 1;
        Aggregator aggregator = 2;
        Completer completer = 3;
        Filter filter = 4;
        Spawner spawner = 5;
        Tee tee = 6;
        Transformer transformer = 7;
        Continuation continuation = 8;
    }
}

message Annotator {
    string name = 1;
    repeated Annotation annotations = 2;
}

message Annotation {
    string fieldKey = 1;
    string value = 2;
    Condition condition = 3;
}

message Aggregator {
    string name = 1;
    Condition condition = 2;
    string stateStore = 3;
    Aggregation aggregation = 4;
    bool asyncCheckpoint = 5;
    bool forwardState = 6;
}

message Aggregation {
    string key = 1;
    AggregationType aggregationType = 2;
    repeated string groupByKeys = 3;
}

message Completer {
    string name = 1;
    Condition condition = 2;
    string stateStore = 3;
    Completion completion = 4;
}

message Completion {
    repeated string joinKeys = 1;
    int64 timeoutMs = 2;
}

message Filter {
    string name = 1;
    string regex = 2;
    bool keepMatched = 3;
}

message Checkpoint {
    string outputConnectorRef = 1;
}

message Spawner {
    string name = 1;
    Condition condition = 2;
    int64 delayInMs = 3;
    bool doSync = 4;
    Job job = 5;
}

// Exec must take map[string]interface{} (JSON) as input
message Runnable {
    string pathToExec = 1;
    repeated string cmdArgs = 2;
}

message Job {
    Runnable runnable = 2;
}

message Tee {
    string name = 1;
    Condition condition = 2;
    google.protobuf.Struct additionalBody = 3;
    string transformerRef = 4;
    string outputConnectorRef = 5;
}

message Continuation {
    string name = 1;
    Condition condition = 2;
}

message Transformer {
    string name = 1;
    repeated TransformerSpec specs = 2;
    bool forwardInputFields = 3;
}

message TransformerSpec {
    string sourceField = 2;
    string targetField = 3;
    Transformation transformation = 4;
}

message MapArgs {
    string path = 1;
}

message MapAddArgs {
    double value = 1;
}

message MapMultArgs {
    double value = 1;
}

message LeftFoldArgs {
    string path = 1;
}

message RightFoldArgs {
    string path = 1;
}

message MapRegexArgs {
    string regex = 1;
    string replace = 2;
}

message Transformation {
    Condition condition = 1;
    TransformationType transformationType = 2;
    oneof transformArgs {
        MapArgs mapArgs = 3;
        MapAddArgs mapAddArgs = 4;
        MapMultArgs mapMultArgs = 5;
        MapRegexArgs mapRegexArgs = 6;
        LeftFoldArgs leftFoldArgs = 7;
        RightFoldArgs rightFoldArgs = 8;
    }
}

message ExistsOperation {
    string key = 1;
    ExistsOperator op = 2;
}

message ExistsExpression {
    repeated ExistsOperation ops = 1;
}

message BooleanExpression {
    bool value = 1;
}

message Variable {
    string name = 1;
}

message Operand {
    oneof operand {
       Expression expression = 1;
       Variable variable = 2;
       string literal = 3;
       double numeric = 4;
    }
}

message ComparatorExpression {
    Operand lhs = 1;
    Operand rhs = 2;
    ComparatorOperator op = 3;
}

message LogicalExpression {
    Operand lhs = 1;
    Operand rhs = 2;
    LogicalOperator op = 3;
}

message BinaryExpression {
    Operand lhs = 1;
    Operand rhs = 2;
    BinaryOperator op = 3;
}

message UnaryExpression {
    Operand rhs = 2;
    UnaryOperator op = 3;
}

message Expression {
    oneof expression {
        BooleanExpression boolean = 3;
        ComparatorExpression comparator = 4;
        LogicalExpression logical = 5;
        BinaryExpression binary = 6;
        UnaryExpression unary = 7;
    }
}

message Condition {
    oneof condition {
        Expression expression = 1;
        ExistsExpression exists = 2;
    }
}

message External {
    ExternalType externalType = 1;
    string name = 2;
    string connectionString = 3;
}
