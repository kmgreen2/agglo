// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerClient is the client API for Ticker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerClient interface {
	Anchor(ctx context.Context, in *AnchorRequest, opts ...grpc.CallOption) (*AnchorResponse, error)
	Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error)
	GetProofStartUuid(ctx context.Context, in *GetProofStartUuidRequest, opts ...grpc.CallOption) (*GetProofStartUuidResponse, error)
	CreateGenesisProof(ctx context.Context, in *CreateGenesisProofRequest, opts ...grpc.CallOption) (*CreateGenesisProofResponse, error)
	HappenedBefore(ctx context.Context, in *HappenedBeforeRequest, opts ...grpc.CallOption) (*HappenedBeforeResponse, error)
}

type tickerClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerClient(cc grpc.ClientConnInterface) TickerClient {
	return &tickerClient{cc}
}

func (c *tickerClient) Anchor(ctx context.Context, in *AnchorRequest, opts ...grpc.CallOption) (*AnchorResponse, error) {
	out := new(AnchorResponse)
	err := c.cc.Invoke(ctx, "/ticker.Ticker/Anchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error) {
	out := new(TickResponse)
	err := c.cc.Invoke(ctx, "/ticker.Ticker/Tick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) GetProofStartUuid(ctx context.Context, in *GetProofStartUuidRequest, opts ...grpc.CallOption) (*GetProofStartUuidResponse, error) {
	out := new(GetProofStartUuidResponse)
	err := c.cc.Invoke(ctx, "/ticker.Ticker/GetProofStartUuid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) CreateGenesisProof(ctx context.Context, in *CreateGenesisProofRequest, opts ...grpc.CallOption) (*CreateGenesisProofResponse, error) {
	out := new(CreateGenesisProofResponse)
	err := c.cc.Invoke(ctx, "/ticker.Ticker/CreateGenesisProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerClient) HappenedBefore(ctx context.Context, in *HappenedBeforeRequest, opts ...grpc.CallOption) (*HappenedBeforeResponse, error) {
	out := new(HappenedBeforeResponse)
	err := c.cc.Invoke(ctx, "/ticker.Ticker/HappenedBefore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerServer is the server API for Ticker service.
// All implementations must embed UnimplementedTickerServer
// for forward compatibility
type TickerServer interface {
	Anchor(context.Context, *AnchorRequest) (*AnchorResponse, error)
	Tick(context.Context, *TickRequest) (*TickResponse, error)
	GetProofStartUuid(context.Context, *GetProofStartUuidRequest) (*GetProofStartUuidResponse, error)
	CreateGenesisProof(context.Context, *CreateGenesisProofRequest) (*CreateGenesisProofResponse, error)
	HappenedBefore(context.Context, *HappenedBeforeRequest) (*HappenedBeforeResponse, error)
	mustEmbedUnimplementedTickerServer()
}

// UnimplementedTickerServer must be embedded to have forward compatible implementations.
type UnimplementedTickerServer struct {
}

func (UnimplementedTickerServer) Anchor(context.Context, *AnchorRequest) (*AnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Anchor not implemented")
}
func (UnimplementedTickerServer) Tick(context.Context, *TickRequest) (*TickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tick not implemented")
}
func (UnimplementedTickerServer) GetProofStartUuid(context.Context, *GetProofStartUuidRequest) (*GetProofStartUuidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofStartUuid not implemented")
}
func (UnimplementedTickerServer) CreateGenesisProof(context.Context, *CreateGenesisProofRequest) (*CreateGenesisProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisProof not implemented")
}
func (UnimplementedTickerServer) HappenedBefore(context.Context, *HappenedBeforeRequest) (*HappenedBeforeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HappenedBefore not implemented")
}
func (UnimplementedTickerServer) mustEmbedUnimplementedTickerServer() {}

// UnsafeTickerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerServer will
// result in compilation errors.
type UnsafeTickerServer interface {
	mustEmbedUnimplementedTickerServer()
}

func RegisterTickerServer(s grpc.ServiceRegistrar, srv TickerServer) {
	s.RegisterService(&Ticker_ServiceDesc, srv)
}

func _Ticker_Anchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).Anchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.Ticker/Anchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).Anchor(ctx, req.(*AnchorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_Tick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).Tick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.Ticker/Tick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).Tick(ctx, req.(*TickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_GetProofStartUuid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofStartUuidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).GetProofStartUuid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.Ticker/GetProofStartUuid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).GetProofStartUuid(ctx, req.(*GetProofStartUuidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_CreateGenesisProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).CreateGenesisProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.Ticker/CreateGenesisProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).CreateGenesisProof(ctx, req.(*CreateGenesisProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticker_HappenedBefore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HappenedBeforeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerServer).HappenedBefore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticker.Ticker/HappenedBefore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerServer).HappenedBefore(ctx, req.(*HappenedBeforeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticker_ServiceDesc is the grpc.ServiceDesc for Ticker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticker.Ticker",
	HandlerType: (*TickerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Anchor",
			Handler:    _Ticker_Anchor_Handler,
		},
		{
			MethodName: "Tick",
			Handler:    _Ticker_Tick_Handler,
		},
		{
			MethodName: "GetProofStartUuid",
			Handler:    _Ticker_GetProofStartUuid_Handler,
		},
		{
			MethodName: "CreateGenesisProof",
			Handler:    _Ticker_CreateGenesisProof_Handler,
		},
		{
			MethodName: "HappenedBefore",
			Handler:    _Ticker_HappenedBefore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticker.proto",
}
