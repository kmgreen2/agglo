// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: pipeline.proto

package pipelineapi

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProcessType int32

const (
	ProcessType_UnknownProcess     ProcessType = 0
	ProcessType_AnnotatorProcess   ProcessType = 1
	ProcessType_AggregatorProcess  ProcessType = 2
	ProcessType_CompleterProcess   ProcessType = 3
	ProcessType_FilterProcess      ProcessType = 4
	ProcessType_SpawnerProcess     ProcessType = 5
	ProcessType_TeeProcess         ProcessType = 6
	ProcessType_TransformerProcess ProcessType = 7
)

// Enum value maps for ProcessType.
var (
	ProcessType_name = map[int32]string{
		0: "UnknownProcess",
		1: "AnnotatorProcess",
		2: "AggregatorProcess",
		3: "CompleterProcess",
		4: "FilterProcess",
		5: "SpawnerProcess",
		6: "TeeProcess",
		7: "TransformerProcess",
	}
	ProcessType_value = map[string]int32{
		"UnknownProcess":     0,
		"AnnotatorProcess":   1,
		"AggregatorProcess":  2,
		"CompleterProcess":   3,
		"FilterProcess":      4,
		"SpawnerProcess":     5,
		"TeeProcess":         6,
		"TransformerProcess": 7,
	}
)

func (x ProcessType) Enum() *ProcessType {
	p := new(ProcessType)
	*p = x
	return p
}

func (x ProcessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[0].Descriptor()
}

func (ProcessType) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[0]
}

func (x ProcessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessType.Descriptor instead.
func (ProcessType) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{0}
}

type ExternalType int32

const (
	ExternalType_ExternalUnknown     ExternalType = 0
	ExternalType_ExternalKVStore     ExternalType = 1
	ExternalType_ExternalObjectStore ExternalType = 2
	ExternalType_ExternalPubSub      ExternalType = 3
	ExternalType_ExternalHttp        ExternalType = 4
)

// Enum value maps for ExternalType.
var (
	ExternalType_name = map[int32]string{
		0: "ExternalUnknown",
		1: "ExternalKVStore",
		2: "ExternalObjectStore",
		3: "ExternalPubSub",
		4: "ExternalHttp",
	}
	ExternalType_value = map[string]int32{
		"ExternalUnknown":     0,
		"ExternalKVStore":     1,
		"ExternalObjectStore": 2,
		"ExternalPubSub":      3,
		"ExternalHttp":        4,
	}
)

func (x ExternalType) Enum() *ExternalType {
	p := new(ExternalType)
	*p = x
	return p
}

func (x ExternalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[1].Descriptor()
}

func (ExternalType) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[1]
}

func (x ExternalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalType.Descriptor instead.
func (ExternalType) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{1}
}

type AggregationType int32

const (
	AggregationType_AggUnknown           AggregationType = 0
	AggregationType_AggSum               AggregationType = 1
	AggregationType_AggMax               AggregationType = 2
	AggregationType_AggMin               AggregationType = 3
	AggregationType_AggAvg               AggregationType = 4
	AggregationType_AggCount             AggregationType = 5
	AggregationType_AggDiscreteHistogram AggregationType = 6
)

// Enum value maps for AggregationType.
var (
	AggregationType_name = map[int32]string{
		0: "AggUnknown",
		1: "AggSum",
		2: "AggMax",
		3: "AggMin",
		4: "AggAvg",
		5: "AggCount",
		6: "AggDiscreteHistogram",
	}
	AggregationType_value = map[string]int32{
		"AggUnknown":           0,
		"AggSum":               1,
		"AggMax":               2,
		"AggMin":               3,
		"AggAvg":               4,
		"AggCount":             5,
		"AggDiscreteHistogram": 6,
	}
)

func (x AggregationType) Enum() *AggregationType {
	p := new(AggregationType)
	*p = x
	return p
}

func (x AggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[2].Descriptor()
}

func (AggregationType) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[2]
}

func (x AggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationType.Descriptor instead.
func (AggregationType) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{2}
}

type TransformationType int32

const (
	TransformationType_TransformUnknown   TransformationType = 0
	TransformationType_TransformSum       TransformationType = 1
	TransformationType_TransformCopy      TransformationType = 2
	TransformationType_TransformMapRegex  TransformationType = 3
	TransformationType_TransformMapAdd    TransformationType = 4
	TransformationType_TransformMapMult   TransformationType = 5
	TransformationType_TransformCount     TransformationType = 6
	TransformationType_TransformLeftFold  TransformationType = 7
	TransformationType_TransformRightFold TransformationType = 8
	TransformationType_TransformMap       TransformationType = 9
)

// Enum value maps for TransformationType.
var (
	TransformationType_name = map[int32]string{
		0: "TransformUnknown",
		1: "TransformSum",
		2: "TransformCopy",
		3: "TransformMapRegex",
		4: "TransformMapAdd",
		5: "TransformMapMult",
		6: "TransformCount",
		7: "TransformLeftFold",
		8: "TransformRightFold",
		9: "TransformMap",
	}
	TransformationType_value = map[string]int32{
		"TransformUnknown":   0,
		"TransformSum":       1,
		"TransformCopy":      2,
		"TransformMapRegex":  3,
		"TransformMapAdd":    4,
		"TransformMapMult":   5,
		"TransformCount":     6,
		"TransformLeftFold":  7,
		"TransformRightFold": 8,
		"TransformMap":       9,
	}
)

func (x TransformationType) Enum() *TransformationType {
	p := new(TransformationType)
	*p = x
	return p
}

func (x TransformationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransformationType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[3].Descriptor()
}

func (TransformationType) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[3]
}

func (x TransformationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransformationType.Descriptor instead.
func (TransformationType) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{3}
}

type OperatorType int32

const (
	OperatorType_UnknownType    OperatorType = 0
	OperatorType_UnaryType      OperatorType = 1
	OperatorType_BinaryType     OperatorType = 2
	OperatorType_LogicalType    OperatorType = 3
	OperatorType_ComparatorType OperatorType = 4
	OperatorType_ExistsType     OperatorType = 5
)

// Enum value maps for OperatorType.
var (
	OperatorType_name = map[int32]string{
		0: "UnknownType",
		1: "UnaryType",
		2: "BinaryType",
		3: "LogicalType",
		4: "ComparatorType",
		5: "ExistsType",
	}
	OperatorType_value = map[string]int32{
		"UnknownType":    0,
		"UnaryType":      1,
		"BinaryType":     2,
		"LogicalType":    3,
		"ComparatorType": 4,
		"ExistsType":     5,
	}
)

func (x OperatorType) Enum() *OperatorType {
	p := new(OperatorType)
	*p = x
	return p
}

func (x OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[4].Descriptor()
}

func (OperatorType) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[4]
}

func (x OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatorType.Descriptor instead.
func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{4}
}

type ExistsOperator int32

const (
	ExistsOperator_UnknownExists ExistsOperator = 0
	ExistsOperator_Exists        ExistsOperator = 1
	ExistsOperator_NotExists     ExistsOperator = 2
)

// Enum value maps for ExistsOperator.
var (
	ExistsOperator_name = map[int32]string{
		0: "UnknownExists",
		1: "Exists",
		2: "NotExists",
	}
	ExistsOperator_value = map[string]int32{
		"UnknownExists": 0,
		"Exists":        1,
		"NotExists":     2,
	}
)

func (x ExistsOperator) Enum() *ExistsOperator {
	p := new(ExistsOperator)
	*p = x
	return p
}

func (x ExistsOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExistsOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[5].Descriptor()
}

func (ExistsOperator) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[5]
}

func (x ExistsOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExistsOperator.Descriptor instead.
func (ExistsOperator) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{5}
}

type UnaryOperator int32

const (
	UnaryOperator_UnknownUnary UnaryOperator = 0
	UnaryOperator_Negation     UnaryOperator = 3
	UnaryOperator_Inversion    UnaryOperator = 4
	UnaryOperator_LogicalNot   UnaryOperator = 5
)

// Enum value maps for UnaryOperator.
var (
	UnaryOperator_name = map[int32]string{
		0: "UnknownUnary",
		3: "Negation",
		4: "Inversion",
		5: "LogicalNot",
	}
	UnaryOperator_value = map[string]int32{
		"UnknownUnary": 0,
		"Negation":     3,
		"Inversion":    4,
		"LogicalNot":   5,
	}
)

func (x UnaryOperator) Enum() *UnaryOperator {
	p := new(UnaryOperator)
	*p = x
	return p
}

func (x UnaryOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnaryOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[6].Descriptor()
}

func (UnaryOperator) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[6]
}

func (x UnaryOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnaryOperator.Descriptor instead.
func (UnaryOperator) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{6}
}

type BinaryOperator int32

const (
	BinaryOperator_UnknownBinary BinaryOperator = 0
	BinaryOperator_Addition      BinaryOperator = 6
	BinaryOperator_Subtract      BinaryOperator = 7
	BinaryOperator_Multiply      BinaryOperator = 8
	BinaryOperator_Divide        BinaryOperator = 9
	BinaryOperator_Power         BinaryOperator = 10
	BinaryOperator_Modulus       BinaryOperator = 11
	BinaryOperator_RightShift    BinaryOperator = 12
	BinaryOperator_LeftShift     BinaryOperator = 13
	BinaryOperator_Or            BinaryOperator = 14
	BinaryOperator_And           BinaryOperator = 15
	BinaryOperator_Xor           BinaryOperator = 16
)

// Enum value maps for BinaryOperator.
var (
	BinaryOperator_name = map[int32]string{
		0:  "UnknownBinary",
		6:  "Addition",
		7:  "Subtract",
		8:  "Multiply",
		9:  "Divide",
		10: "Power",
		11: "Modulus",
		12: "RightShift",
		13: "LeftShift",
		14: "Or",
		15: "And",
		16: "Xor",
	}
	BinaryOperator_value = map[string]int32{
		"UnknownBinary": 0,
		"Addition":      6,
		"Subtract":      7,
		"Multiply":      8,
		"Divide":        9,
		"Power":         10,
		"Modulus":       11,
		"RightShift":    12,
		"LeftShift":     13,
		"Or":            14,
		"And":           15,
		"Xor":           16,
	}
)

func (x BinaryOperator) Enum() *BinaryOperator {
	p := new(BinaryOperator)
	*p = x
	return p
}

func (x BinaryOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BinaryOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[7].Descriptor()
}

func (BinaryOperator) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[7]
}

func (x BinaryOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BinaryOperator.Descriptor instead.
func (BinaryOperator) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{7}
}

type LogicalOperator int32

const (
	LogicalOperator_UnknownLogical LogicalOperator = 0
	LogicalOperator_LogicalAnd     LogicalOperator = 17
	LogicalOperator_LogicalOr      LogicalOperator = 18
)

// Enum value maps for LogicalOperator.
var (
	LogicalOperator_name = map[int32]string{
		0:  "UnknownLogical",
		17: "LogicalAnd",
		18: "LogicalOr",
	}
	LogicalOperator_value = map[string]int32{
		"UnknownLogical": 0,
		"LogicalAnd":     17,
		"LogicalOr":      18,
	}
)

func (x LogicalOperator) Enum() *LogicalOperator {
	p := new(LogicalOperator)
	*p = x
	return p
}

func (x LogicalOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogicalOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[8].Descriptor()
}

func (LogicalOperator) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[8]
}

func (x LogicalOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogicalOperator.Descriptor instead.
func (LogicalOperator) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{8}
}

type ComparatorOperator int32

const (
	ComparatorOperator_UnknownComparator  ComparatorOperator = 0
	ComparatorOperator_GreaterThan        ComparatorOperator = 19
	ComparatorOperator_LessThan           ComparatorOperator = 20
	ComparatorOperator_GreaterThanOrEqual ComparatorOperator = 21
	ComparatorOperator_LessThanOrEqual    ComparatorOperator = 22
	ComparatorOperator_Equal              ComparatorOperator = 23
	ComparatorOperator_NotEqual           ComparatorOperator = 24
	ComparatorOperator_RegexMatch         ComparatorOperator = 25
	ComparatorOperator_RegexNotMatch      ComparatorOperator = 26
)

// Enum value maps for ComparatorOperator.
var (
	ComparatorOperator_name = map[int32]string{
		0:  "UnknownComparator",
		19: "GreaterThan",
		20: "LessThan",
		21: "GreaterThanOrEqual",
		22: "LessThanOrEqual",
		23: "Equal",
		24: "NotEqual",
		25: "RegexMatch",
		26: "RegexNotMatch",
	}
	ComparatorOperator_value = map[string]int32{
		"UnknownComparator":  0,
		"GreaterThan":        19,
		"LessThan":           20,
		"GreaterThanOrEqual": 21,
		"LessThanOrEqual":    22,
		"Equal":              23,
		"NotEqual":           24,
		"RegexMatch":         25,
		"RegexNotMatch":      26,
	}
)

func (x ComparatorOperator) Enum() *ComparatorOperator {
	p := new(ComparatorOperator)
	*p = x
	return p
}

func (x ComparatorOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparatorOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_pipeline_proto_enumTypes[9].Descriptor()
}

func (ComparatorOperator) Type() protoreflect.EnumType {
	return &file_pipeline_proto_enumTypes[9]
}

func (x ComparatorOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparatorOperator.Descriptor instead.
func (ComparatorOperator) EnumDescriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{9}
}

type Pipelines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionUuid      string               `protobuf:"bytes,1,opt,name=partitionUuid,proto3" json:"partitionUuid,omitempty"`
	Pipelines          []*Pipeline          `protobuf:"bytes,2,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	ProcessDefinitions []*ProcessDefinition `protobuf:"bytes,3,rep,name=processDefinitions,proto3" json:"processDefinitions,omitempty"`
	ExternalSystems    []*External          `protobuf:"bytes,4,rep,name=externalSystems,proto3" json:"externalSystems,omitempty"`
}

func (x *Pipelines) Reset() {
	*x = Pipelines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipelines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipelines) ProtoMessage() {}

func (x *Pipelines) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipelines.ProtoReflect.Descriptor instead.
func (*Pipelines) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *Pipelines) GetPartitionUuid() string {
	if x != nil {
		return x.PartitionUuid
	}
	return ""
}

func (x *Pipelines) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *Pipelines) GetProcessDefinitions() []*ProcessDefinition {
	if x != nil {
		return x.ProcessDefinitions
	}
	return nil
}

func (x *Pipelines) GetExternalSystems() []*External {
	if x != nil {
		return x.ExternalSystems
	}
	return nil
}

type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Processes []*PipelineProcess `protobuf:"bytes,2,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetProcesses() []*PipelineProcess {
	if x != nil {
		return x.Processes
	}
	return nil
}

type PipelineProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessType ProcessType `protobuf:"varint,1,opt,name=processType,proto3,enum=pipeline.ProcessType" json:"processType,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PipelineProcess) Reset() {
	*x = PipelineProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineProcess) ProtoMessage() {}

func (x *PipelineProcess) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineProcess.ProtoReflect.Descriptor instead.
func (*PipelineProcess) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineProcess) GetProcessType() ProcessType {
	if x != nil {
		return x.ProcessType
	}
	return ProcessType_UnknownProcess
}

func (x *PipelineProcess) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProcessDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProcessDefinition:
	//	*ProcessDefinition_Annotator
	//	*ProcessDefinition_Aggregator
	//	*ProcessDefinition_Completer
	//	*ProcessDefinition_Filter
	//	*ProcessDefinition_Spawner
	//	*ProcessDefinition_Tee
	//	*ProcessDefinition_Transformer
	ProcessDefinition isProcessDefinition_ProcessDefinition `protobuf_oneof:"processDefinition"`
}

func (x *ProcessDefinition) Reset() {
	*x = ProcessDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDefinition) ProtoMessage() {}

func (x *ProcessDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDefinition.ProtoReflect.Descriptor instead.
func (*ProcessDefinition) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{3}
}

func (m *ProcessDefinition) GetProcessDefinition() isProcessDefinition_ProcessDefinition {
	if m != nil {
		return m.ProcessDefinition
	}
	return nil
}

func (x *ProcessDefinition) GetAnnotator() *Annotator {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Annotator); ok {
		return x.Annotator
	}
	return nil
}

func (x *ProcessDefinition) GetAggregator() *Aggregator {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Aggregator); ok {
		return x.Aggregator
	}
	return nil
}

func (x *ProcessDefinition) GetCompleter() *Completer {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Completer); ok {
		return x.Completer
	}
	return nil
}

func (x *ProcessDefinition) GetFilter() *Filter {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *ProcessDefinition) GetSpawner() *Spawner {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Spawner); ok {
		return x.Spawner
	}
	return nil
}

func (x *ProcessDefinition) GetTee() *Tee {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Tee); ok {
		return x.Tee
	}
	return nil
}

func (x *ProcessDefinition) GetTransformer() *Transformer {
	if x, ok := x.GetProcessDefinition().(*ProcessDefinition_Transformer); ok {
		return x.Transformer
	}
	return nil
}

type isProcessDefinition_ProcessDefinition interface {
	isProcessDefinition_ProcessDefinition()
}

type ProcessDefinition_Annotator struct {
	Annotator *Annotator `protobuf:"bytes,1,opt,name=annotator,proto3,oneof"`
}

type ProcessDefinition_Aggregator struct {
	Aggregator *Aggregator `protobuf:"bytes,2,opt,name=aggregator,proto3,oneof"`
}

type ProcessDefinition_Completer struct {
	Completer *Completer `protobuf:"bytes,3,opt,name=completer,proto3,oneof"`
}

type ProcessDefinition_Filter struct {
	Filter *Filter `protobuf:"bytes,4,opt,name=filter,proto3,oneof"`
}

type ProcessDefinition_Spawner struct {
	Spawner *Spawner `protobuf:"bytes,5,opt,name=spawner,proto3,oneof"`
}

type ProcessDefinition_Tee struct {
	Tee *Tee `protobuf:"bytes,6,opt,name=tee,proto3,oneof"`
}

type ProcessDefinition_Transformer struct {
	Transformer *Transformer `protobuf:"bytes,7,opt,name=transformer,proto3,oneof"`
}

func (*ProcessDefinition_Annotator) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Aggregator) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Completer) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Filter) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Spawner) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Tee) isProcessDefinition_ProcessDefinition() {}

func (*ProcessDefinition_Transformer) isProcessDefinition_ProcessDefinition() {}

type Annotator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Annotator) Reset() {
	*x = Annotator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotator) ProtoMessage() {}

func (x *Annotator) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotator.ProtoReflect.Descriptor instead.
func (*Annotator) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *Annotator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Annotator) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldKey  string     `protobuf:"bytes,1,opt,name=fieldKey,proto3" json:"fieldKey,omitempty"`
	Value     string     `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Condition *Condition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *Annotation) GetFieldKey() string {
	if x != nil {
		return x.FieldKey
	}
	return ""
}

func (x *Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Annotation) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type Aggregator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Condition   *Condition   `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	StateStore  string       `protobuf:"bytes,3,opt,name=stateStore,proto3" json:"stateStore,omitempty"`
	Aggregation *Aggregation `protobuf:"bytes,4,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *Aggregator) Reset() {
	*x = Aggregator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregator) ProtoMessage() {}

func (x *Aggregator) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregator.ProtoReflect.Descriptor instead.
func (*Aggregator) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *Aggregator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Aggregator) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Aggregator) GetStateStore() string {
	if x != nil {
		return x.StateStore
	}
	return ""
}

func (x *Aggregator) GetAggregation() *Aggregation {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

type Aggregation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string          `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	AggregationType AggregationType `protobuf:"varint,2,opt,name=aggregationType,proto3,enum=pipeline.AggregationType" json:"aggregationType,omitempty"`
	GroupByKeys     []string        `protobuf:"bytes,3,rep,name=groupByKeys,proto3" json:"groupByKeys,omitempty"`
}

func (x *Aggregation) Reset() {
	*x = Aggregation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggregation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggregation) ProtoMessage() {}

func (x *Aggregation) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggregation.ProtoReflect.Descriptor instead.
func (*Aggregation) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *Aggregation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Aggregation) GetAggregationType() AggregationType {
	if x != nil {
		return x.AggregationType
	}
	return AggregationType_AggUnknown
}

func (x *Aggregation) GetGroupByKeys() []string {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

type Completer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Condition  *Condition  `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	StateStore string      `protobuf:"bytes,3,opt,name=stateStore,proto3" json:"stateStore,omitempty"`
	Completion *Completion `protobuf:"bytes,4,opt,name=completion,proto3" json:"completion,omitempty"`
}

func (x *Completer) Reset() {
	*x = Completer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completer) ProtoMessage() {}

func (x *Completer) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completer.ProtoReflect.Descriptor instead.
func (*Completer) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *Completer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Completer) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Completer) GetStateStore() string {
	if x != nil {
		return x.StateStore
	}
	return ""
}

func (x *Completer) GetCompletion() *Completion {
	if x != nil {
		return x.Completion
	}
	return nil
}

type Completion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JoinKeys  []string `protobuf:"bytes,1,rep,name=joinKeys,proto3" json:"joinKeys,omitempty"`
	TimeoutMs int64    `protobuf:"varint,2,opt,name=timeoutMs,proto3" json:"timeoutMs,omitempty"`
}

func (x *Completion) Reset() {
	*x = Completion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion) ProtoMessage() {}

func (x *Completion) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion.ProtoReflect.Descriptor instead.
func (*Completion) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *Completion) GetJoinKeys() []string {
	if x != nil {
		return x.JoinKeys
	}
	return nil
}

func (x *Completion) GetTimeoutMs() int64 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regex       string `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
	KeepMatched bool   `protobuf:"varint,3,opt,name=keepMatched,proto3" json:"keepMatched,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *Filter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filter) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *Filter) GetKeepMatched() bool {
	if x != nil {
		return x.KeepMatched
	}
	return false
}

type Spawner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Condition *Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	DelayInMs int64      `protobuf:"varint,3,opt,name=delayInMs,proto3" json:"delayInMs,omitempty"`
	DoSync    bool       `protobuf:"varint,4,opt,name=doSync,proto3" json:"doSync,omitempty"`
	Job       *Job       `protobuf:"bytes,5,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *Spawner) Reset() {
	*x = Spawner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spawner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spawner) ProtoMessage() {}

func (x *Spawner) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spawner.ProtoReflect.Descriptor instead.
func (*Spawner) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *Spawner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spawner) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Spawner) GetDelayInMs() int64 {
	if x != nil {
		return x.DelayInMs
	}
	return 0
}

func (x *Spawner) GetDoSync() bool {
	if x != nil {
		return x.DoSync
	}
	return false
}

func (x *Spawner) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// Exec must take map[string]interface{} (JSON) as input
// ToDo(KMG): Use exec and pipes to implement
type Runnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathToExec string `protobuf:"bytes,1,opt,name=pathToExec,proto3" json:"pathToExec,omitempty"`
}

func (x *Runnable) Reset() {
	*x = Runnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runnable) ProtoMessage() {}

func (x *Runnable) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runnable.ProtoReflect.Descriptor instead.
func (*Runnable) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *Runnable) GetPathToExec() string {
	if x != nil {
		return x.PathToExec
	}
	return ""
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Runnable *Runnable `protobuf:"bytes,2,opt,name=runnable,proto3" json:"runnable,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *Job) GetRunnable() *Runnable {
	if x != nil {
		return x.Runnable
	}
	return nil
}

type Tee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Condition        *Condition         `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	TransformerSpecs []*TransformerSpec `protobuf:"bytes,3,rep,name=transformerSpecs,proto3" json:"transformerSpecs,omitempty"`
	OutputConnector  string             `protobuf:"bytes,4,opt,name=outputConnector,proto3" json:"outputConnector,omitempty"`
	ExternalType     ExternalType       `protobuf:"varint,5,opt,name=externalType,proto3,enum=pipeline.ExternalType" json:"externalType,omitempty"`
}

func (x *Tee) Reset() {
	*x = Tee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tee) ProtoMessage() {}

func (x *Tee) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tee.ProtoReflect.Descriptor instead.
func (*Tee) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *Tee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tee) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Tee) GetTransformerSpecs() []*TransformerSpec {
	if x != nil {
		return x.TransformerSpecs
	}
	return nil
}

func (x *Tee) GetOutputConnector() string {
	if x != nil {
		return x.OutputConnector
	}
	return ""
}

func (x *Tee) GetExternalType() ExternalType {
	if x != nil {
		return x.ExternalType
	}
	return ExternalType_ExternalUnknown
}

type Transformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Specs []*TransformerSpec `protobuf:"bytes,2,rep,name=specs,proto3" json:"specs,omitempty"`
}

func (x *Transformer) Reset() {
	*x = Transformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformer) ProtoMessage() {}

func (x *Transformer) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformer.ProtoReflect.Descriptor instead.
func (*Transformer) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *Transformer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transformer) GetSpecs() []*TransformerSpec {
	if x != nil {
		return x.Specs
	}
	return nil
}

type TransformerSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceField    string          `protobuf:"bytes,2,opt,name=sourceField,proto3" json:"sourceField,omitempty"`
	TargetField    string          `protobuf:"bytes,3,opt,name=targetField,proto3" json:"targetField,omitempty"`
	Transformation *Transformation `protobuf:"bytes,4,opt,name=transformation,proto3" json:"transformation,omitempty"`
}

func (x *TransformerSpec) Reset() {
	*x = TransformerSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformerSpec) ProtoMessage() {}

func (x *TransformerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformerSpec.ProtoReflect.Descriptor instead.
func (*TransformerSpec) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *TransformerSpec) GetSourceField() string {
	if x != nil {
		return x.SourceField
	}
	return ""
}

func (x *TransformerSpec) GetTargetField() string {
	if x != nil {
		return x.TargetField
	}
	return ""
}

func (x *TransformerSpec) GetTransformation() *Transformation {
	if x != nil {
		return x.Transformation
	}
	return nil
}

type MapArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *MapArgs) Reset() {
	*x = MapArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapArgs) ProtoMessage() {}

func (x *MapArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapArgs.ProtoReflect.Descriptor instead.
func (*MapArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *MapArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MapAddArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapAddArgs) Reset() {
	*x = MapAddArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapAddArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapAddArgs) ProtoMessage() {}

func (x *MapAddArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapAddArgs.ProtoReflect.Descriptor instead.
func (*MapAddArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *MapAddArgs) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MapMultArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapMultArgs) Reset() {
	*x = MapMultArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMultArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMultArgs) ProtoMessage() {}

func (x *MapMultArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMultArgs.ProtoReflect.Descriptor instead.
func (*MapMultArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *MapMultArgs) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type LeftFoldArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *LeftFoldArgs) Reset() {
	*x = LeftFoldArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftFoldArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftFoldArgs) ProtoMessage() {}

func (x *LeftFoldArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftFoldArgs.ProtoReflect.Descriptor instead.
func (*LeftFoldArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *LeftFoldArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RightFoldArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RightFoldArgs) Reset() {
	*x = RightFoldArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RightFoldArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RightFoldArgs) ProtoMessage() {}

func (x *RightFoldArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RightFoldArgs.ProtoReflect.Descriptor instead.
func (*RightFoldArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *RightFoldArgs) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type MapRegexArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex   string `protobuf:"bytes,1,opt,name=regex,proto3" json:"regex,omitempty"`
	Replace string `protobuf:"bytes,2,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *MapRegexArgs) Reset() {
	*x = MapRegexArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRegexArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRegexArgs) ProtoMessage() {}

func (x *MapRegexArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRegexArgs.ProtoReflect.Descriptor instead.
func (*MapRegexArgs) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *MapRegexArgs) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *MapRegexArgs) GetReplace() string {
	if x != nil {
		return x.Replace
	}
	return ""
}

type Transformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition          *Condition         `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	TransformationType TransformationType `protobuf:"varint,2,opt,name=transformationType,proto3,enum=pipeline.TransformationType" json:"transformationType,omitempty"`
	// Types that are assignable to TransformArgs:
	//	*Transformation_MapArgs
	//	*Transformation_MapAddArgs
	//	*Transformation_MapMultArgs
	//	*Transformation_MapRegexArgs
	//	*Transformation_LeftFoldArgs
	//	*Transformation_RightFoldArgs
	TransformArgs isTransformation_TransformArgs `protobuf_oneof:"transformArgs"`
}

func (x *Transformation) Reset() {
	*x = Transformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformation) ProtoMessage() {}

func (x *Transformation) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformation.ProtoReflect.Descriptor instead.
func (*Transformation) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *Transformation) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Transformation) GetTransformationType() TransformationType {
	if x != nil {
		return x.TransformationType
	}
	return TransformationType_TransformUnknown
}

func (m *Transformation) GetTransformArgs() isTransformation_TransformArgs {
	if m != nil {
		return m.TransformArgs
	}
	return nil
}

func (x *Transformation) GetMapArgs() *MapArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_MapArgs); ok {
		return x.MapArgs
	}
	return nil
}

func (x *Transformation) GetMapAddArgs() *MapAddArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_MapAddArgs); ok {
		return x.MapAddArgs
	}
	return nil
}

func (x *Transformation) GetMapMultArgs() *MapMultArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_MapMultArgs); ok {
		return x.MapMultArgs
	}
	return nil
}

func (x *Transformation) GetMapRegexArgs() *MapRegexArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_MapRegexArgs); ok {
		return x.MapRegexArgs
	}
	return nil
}

func (x *Transformation) GetLeftFoldArgs() *LeftFoldArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_LeftFoldArgs); ok {
		return x.LeftFoldArgs
	}
	return nil
}

func (x *Transformation) GetRightFoldArgs() *RightFoldArgs {
	if x, ok := x.GetTransformArgs().(*Transformation_RightFoldArgs); ok {
		return x.RightFoldArgs
	}
	return nil
}

type isTransformation_TransformArgs interface {
	isTransformation_TransformArgs()
}

type Transformation_MapArgs struct {
	MapArgs *MapArgs `protobuf:"bytes,3,opt,name=mapArgs,proto3,oneof"`
}

type Transformation_MapAddArgs struct {
	MapAddArgs *MapAddArgs `protobuf:"bytes,4,opt,name=mapAddArgs,proto3,oneof"`
}

type Transformation_MapMultArgs struct {
	MapMultArgs *MapMultArgs `protobuf:"bytes,5,opt,name=mapMultArgs,proto3,oneof"`
}

type Transformation_MapRegexArgs struct {
	MapRegexArgs *MapRegexArgs `protobuf:"bytes,6,opt,name=mapRegexArgs,proto3,oneof"`
}

type Transformation_LeftFoldArgs struct {
	LeftFoldArgs *LeftFoldArgs `protobuf:"bytes,7,opt,name=leftFoldArgs,proto3,oneof"`
}

type Transformation_RightFoldArgs struct {
	RightFoldArgs *RightFoldArgs `protobuf:"bytes,8,opt,name=rightFoldArgs,proto3,oneof"`
}

func (*Transformation_MapArgs) isTransformation_TransformArgs() {}

func (*Transformation_MapAddArgs) isTransformation_TransformArgs() {}

func (*Transformation_MapMultArgs) isTransformation_TransformArgs() {}

func (*Transformation_MapRegexArgs) isTransformation_TransformArgs() {}

func (*Transformation_LeftFoldArgs) isTransformation_TransformArgs() {}

func (*Transformation_RightFoldArgs) isTransformation_TransformArgs() {}

type ExistsOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Op  ExistsOperator `protobuf:"varint,2,opt,name=op,proto3,enum=pipeline.ExistsOperator" json:"op,omitempty"`
}

func (x *ExistsOperation) Reset() {
	*x = ExistsOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsOperation) ProtoMessage() {}

func (x *ExistsOperation) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsOperation.ProtoReflect.Descriptor instead.
func (*ExistsOperation) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *ExistsOperation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExistsOperation) GetOp() ExistsOperator {
	if x != nil {
		return x.Op
	}
	return ExistsOperator_UnknownExists
}

type ExistsExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ops []*ExistsOperation `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *ExistsExpression) Reset() {
	*x = ExistsExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsExpression) ProtoMessage() {}

func (x *ExistsExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsExpression.ProtoReflect.Descriptor instead.
func (*ExistsExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *ExistsExpression) GetOps() []*ExistsOperation {
	if x != nil {
		return x.Ops
	}
	return nil
}

type BooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanExpression) Reset() {
	*x = BooleanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanExpression) ProtoMessage() {}

func (x *BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanExpression.ProtoReflect.Descriptor instead.
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *BooleanExpression) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operand:
	//	*Operand_Expression
	//	*Operand_Variable
	//	*Operand_Literal
	//	*Operand_Numeric
	Operand isOperand_Operand `protobuf_oneof:"operand"`
}

func (x *Operand) Reset() {
	*x = Operand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operand) ProtoMessage() {}

func (x *Operand) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operand.ProtoReflect.Descriptor instead.
func (*Operand) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{28}
}

func (m *Operand) GetOperand() isOperand_Operand {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (x *Operand) GetExpression() *Expression {
	if x, ok := x.GetOperand().(*Operand_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *Operand) GetVariable() *Variable {
	if x, ok := x.GetOperand().(*Operand_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *Operand) GetLiteral() string {
	if x, ok := x.GetOperand().(*Operand_Literal); ok {
		return x.Literal
	}
	return ""
}

func (x *Operand) GetNumeric() float64 {
	if x, ok := x.GetOperand().(*Operand_Numeric); ok {
		return x.Numeric
	}
	return 0
}

type isOperand_Operand interface {
	isOperand_Operand()
}

type Operand_Expression struct {
	Expression *Expression `protobuf:"bytes,1,opt,name=expression,proto3,oneof"`
}

type Operand_Variable struct {
	Variable *Variable `protobuf:"bytes,2,opt,name=variable,proto3,oneof"`
}

type Operand_Literal struct {
	Literal string `protobuf:"bytes,3,opt,name=literal,proto3,oneof"`
}

type Operand_Numeric struct {
	Numeric float64 `protobuf:"fixed64,4,opt,name=numeric,proto3,oneof"`
}

func (*Operand_Expression) isOperand_Operand() {}

func (*Operand_Variable) isOperand_Operand() {}

func (*Operand_Literal) isOperand_Operand() {}

func (*Operand_Numeric) isOperand_Operand() {}

type ComparatorExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs *Operand           `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Operand           `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	Op  ComparatorOperator `protobuf:"varint,3,opt,name=op,proto3,enum=pipeline.ComparatorOperator" json:"op,omitempty"`
}

func (x *ComparatorExpression) Reset() {
	*x = ComparatorExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparatorExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparatorExpression) ProtoMessage() {}

func (x *ComparatorExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparatorExpression.ProtoReflect.Descriptor instead.
func (*ComparatorExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *ComparatorExpression) GetLhs() *Operand {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ComparatorExpression) GetRhs() *Operand {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *ComparatorExpression) GetOp() ComparatorOperator {
	if x != nil {
		return x.Op
	}
	return ComparatorOperator_UnknownComparator
}

type LogicalExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs *Operand        `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Operand        `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	Op  LogicalOperator `protobuf:"varint,3,opt,name=op,proto3,enum=pipeline.LogicalOperator" json:"op,omitempty"`
}

func (x *LogicalExpression) Reset() {
	*x = LogicalExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicalExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalExpression) ProtoMessage() {}

func (x *LogicalExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalExpression.ProtoReflect.Descriptor instead.
func (*LogicalExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *LogicalExpression) GetLhs() *Operand {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *LogicalExpression) GetRhs() *Operand {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *LogicalExpression) GetOp() LogicalOperator {
	if x != nil {
		return x.Op
	}
	return LogicalOperator_UnknownLogical
}

type BinaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs *Operand       `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Operand       `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	Op  BinaryOperator `protobuf:"varint,3,opt,name=op,proto3,enum=pipeline.BinaryOperator" json:"op,omitempty"`
}

func (x *BinaryExpression) Reset() {
	*x = BinaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryExpression) ProtoMessage() {}

func (x *BinaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryExpression.ProtoReflect.Descriptor instead.
func (*BinaryExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *BinaryExpression) GetLhs() *Operand {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *BinaryExpression) GetRhs() *Operand {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *BinaryExpression) GetOp() BinaryOperator {
	if x != nil {
		return x.Op
	}
	return BinaryOperator_UnknownBinary
}

type UnaryExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rhs *Operand      `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	Op  UnaryOperator `protobuf:"varint,3,opt,name=op,proto3,enum=pipeline.UnaryOperator" json:"op,omitempty"`
}

func (x *UnaryExpression) Reset() {
	*x = UnaryExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryExpression) ProtoMessage() {}

func (x *UnaryExpression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryExpression.ProtoReflect.Descriptor instead.
func (*UnaryExpression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *UnaryExpression) GetRhs() *Operand {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *UnaryExpression) GetOp() UnaryOperator {
	if x != nil {
		return x.Op
	}
	return UnaryOperator_UnknownUnary
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Expression:
	//	*Expression_Boolean
	//	*Expression_Comparator
	//	*Expression_Logical
	//	*Expression_Binary
	//	*Expression_Unary
	Expression isExpression_Expression `protobuf_oneof:"expression"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{33}
}

func (m *Expression) GetExpression() isExpression_Expression {
	if m != nil {
		return m.Expression
	}
	return nil
}

func (x *Expression) GetBoolean() *BooleanExpression {
	if x, ok := x.GetExpression().(*Expression_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Expression) GetComparator() *ComparatorExpression {
	if x, ok := x.GetExpression().(*Expression_Comparator); ok {
		return x.Comparator
	}
	return nil
}

func (x *Expression) GetLogical() *LogicalExpression {
	if x, ok := x.GetExpression().(*Expression_Logical); ok {
		return x.Logical
	}
	return nil
}

func (x *Expression) GetBinary() *BinaryExpression {
	if x, ok := x.GetExpression().(*Expression_Binary); ok {
		return x.Binary
	}
	return nil
}

func (x *Expression) GetUnary() *UnaryExpression {
	if x, ok := x.GetExpression().(*Expression_Unary); ok {
		return x.Unary
	}
	return nil
}

type isExpression_Expression interface {
	isExpression_Expression()
}

type Expression_Boolean struct {
	Boolean *BooleanExpression `protobuf:"bytes,3,opt,name=boolean,proto3,oneof"`
}

type Expression_Comparator struct {
	Comparator *ComparatorExpression `protobuf:"bytes,4,opt,name=comparator,proto3,oneof"`
}

type Expression_Logical struct {
	Logical *LogicalExpression `protobuf:"bytes,5,opt,name=logical,proto3,oneof"`
}

type Expression_Binary struct {
	Binary *BinaryExpression `protobuf:"bytes,6,opt,name=binary,proto3,oneof"`
}

type Expression_Unary struct {
	Unary *UnaryExpression `protobuf:"bytes,7,opt,name=unary,proto3,oneof"`
}

func (*Expression_Boolean) isExpression_Expression() {}

func (*Expression_Comparator) isExpression_Expression() {}

func (*Expression_Logical) isExpression_Expression() {}

func (*Expression_Binary) isExpression_Expression() {}

func (*Expression_Unary) isExpression_Expression() {}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//	*Condition_Expression
	//	*Condition_Exists
	Condition isCondition_Condition `protobuf_oneof:"condition"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{34}
}

func (m *Condition) GetCondition() isCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *Condition) GetExpression() *Expression {
	if x, ok := x.GetCondition().(*Condition_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *Condition) GetExists() *ExistsExpression {
	if x, ok := x.GetCondition().(*Condition_Exists); ok {
		return x.Exists
	}
	return nil
}

type isCondition_Condition interface {
	isCondition_Condition()
}

type Condition_Expression struct {
	Expression *Expression `protobuf:"bytes,1,opt,name=expression,proto3,oneof"`
}

type Condition_Exists struct {
	Exists *ExistsExpression `protobuf:"bytes,2,opt,name=exists,proto3,oneof"`
}

func (*Condition_Expression) isCondition_Condition() {}

func (*Condition_Exists) isCondition_Condition() {}

type External struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalType     ExternalType `protobuf:"varint,1,opt,name=externalType,proto3,enum=pipeline.ExternalType" json:"externalType,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectionString string       `protobuf:"bytes,3,opt,name=connectionString,proto3" json:"connectionString,omitempty"`
}

func (x *External) Reset() {
	*x = External{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pipeline_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*External) ProtoMessage() {}

func (x *External) ProtoReflect() protoreflect.Message {
	mi := &file_pipeline_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use External.ProtoReflect.Descriptor instead.
func (*External) Descriptor() ([]byte, []int) {
	return file_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *External) GetExternalType() ExternalType {
	if x != nil {
		return x.ExternalType
	}
	return ExternalType_ExternalUnknown
}

func (x *External) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *External) GetConnectionString() string {
	if x != nil {
		return x.ConnectionString
	}
	return ""
}

var File_pipeline_proto protoreflect.FileDescriptor

var file_pipeline_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x4b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x57, 0x0a, 0x08, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x36, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x73, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x74, 0x65, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x65, 0x65, 0x48, 0x00, 0x52, 0x03, 0x74, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x42, 0x13, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x09, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x0a, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xa8,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d,
	0x73, 0x22, 0x54, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x07, 0x53, 0x70, 0x61, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x53, 0x79,
	0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x22, 0x2a, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x22, 0x35, 0x0a,
	0x03, 0x4a, 0x6f, 0x62, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x03, 0x54, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x52, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x63, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d,
	0x0a, 0x07, 0x4d, 0x61, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x22, 0x0a,
	0x0a, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x23, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f,
	0x6c, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x3e, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22,
	0x81, 0x04, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x41, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x41, 0x72,
	0x67, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x41, 0x72, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61,
	0x70, 0x4d, 0x75, 0x6c, 0x74, 0x41, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x75,
	0x6c, 0x74, 0x41, 0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x75, 0x6c,
	0x74, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x41, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x41,
	0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41,
	0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72, 0x67,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x41, 0x72,
	0x67, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x72, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02,
	0x6f, 0x70, 0x22, 0x3f, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03,
	0x6f, 0x70, 0x73, 0x22, 0x29, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e,
	0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb6,
	0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x12, 0x1a, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x03,
	0x6c, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x02, 0x6f, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x23, 0x0a,
	0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x72,
	0x68, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x5f, 0x0a, 0x0f,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52,
	0x03, 0x72, 0x68, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x22, 0xb7, 0x02,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x86, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x3a, 0x0a,
	0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0xb3, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x10, 0x07, 0x2a,
	0x77, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4b, 0x56, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x75,
	0x62, 0x53, 0x75, 0x62, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x48, 0x74, 0x74, 0x70, 0x10, 0x04, 0x2a, 0x79, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x67, 0x67, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x67, 0x67, 0x53, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x67, 0x67, 0x4d, 0x61,
	0x78, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x67, 0x67, 0x4d, 0x69, 0x6e, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x67, 0x67, 0x41, 0x76, 0x67, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x67, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x67, 0x67,
	0x44, 0x69, 0x73, 0x63, 0x72, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x10, 0x06, 0x2a, 0xe6, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x6d,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x6f, 0x70, 0x79, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x41, 0x64, 0x64, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61,
	0x70, 0x4d, 0x75, 0x6c, 0x74, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x65, 0x66, 0x74, 0x46, 0x6f, 0x6c, 0x64,
	0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x61, 0x70, 0x10, 0x09, 0x2a, 0x73, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x05, 0x2a, 0x3e, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10,
	0x02, 0x2a, 0x4e, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x10,
	0x05, 0x2a, 0xaa, 0x01, 0x0a, 0x0e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x10,
	0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x75, 0x73, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x53, 0x68,
	0x69, 0x66, 0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x10, 0x0d, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x6f, 0x72, 0x10, 0x10, 0x2a, 0x44,
	0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x41, 0x6e, 0x64, 0x10, 0x11, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x10, 0x12, 0x2a, 0xb3, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10,
	0x14, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x16, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x74,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x1a, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_pipeline_proto_rawDescOnce sync.Once
	file_pipeline_proto_rawDescData = file_pipeline_proto_rawDesc
)

func file_pipeline_proto_rawDescGZIP() []byte {
	file_pipeline_proto_rawDescOnce.Do(func() {
		file_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_pipeline_proto_rawDescData)
	})
	return file_pipeline_proto_rawDescData
}

var file_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_pipeline_proto_goTypes = []interface{}{
	(ProcessType)(0),             // 0: pipeline.ProcessType
	(ExternalType)(0),            // 1: pipeline.ExternalType
	(AggregationType)(0),         // 2: pipeline.AggregationType
	(TransformationType)(0),      // 3: pipeline.TransformationType
	(OperatorType)(0),            // 4: pipeline.OperatorType
	(ExistsOperator)(0),          // 5: pipeline.ExistsOperator
	(UnaryOperator)(0),           // 6: pipeline.UnaryOperator
	(BinaryOperator)(0),          // 7: pipeline.BinaryOperator
	(LogicalOperator)(0),         // 8: pipeline.LogicalOperator
	(ComparatorOperator)(0),      // 9: pipeline.ComparatorOperator
	(*Pipelines)(nil),            // 10: pipeline.Pipelines
	(*Pipeline)(nil),             // 11: pipeline.Pipeline
	(*PipelineProcess)(nil),      // 12: pipeline.PipelineProcess
	(*ProcessDefinition)(nil),    // 13: pipeline.ProcessDefinition
	(*Annotator)(nil),            // 14: pipeline.Annotator
	(*Annotation)(nil),           // 15: pipeline.Annotation
	(*Aggregator)(nil),           // 16: pipeline.Aggregator
	(*Aggregation)(nil),          // 17: pipeline.Aggregation
	(*Completer)(nil),            // 18: pipeline.Completer
	(*Completion)(nil),           // 19: pipeline.Completion
	(*Filter)(nil),               // 20: pipeline.Filter
	(*Spawner)(nil),              // 21: pipeline.Spawner
	(*Runnable)(nil),             // 22: pipeline.Runnable
	(*Job)(nil),                  // 23: pipeline.Job
	(*Tee)(nil),                  // 24: pipeline.Tee
	(*Transformer)(nil),          // 25: pipeline.Transformer
	(*TransformerSpec)(nil),      // 26: pipeline.TransformerSpec
	(*MapArgs)(nil),              // 27: pipeline.MapArgs
	(*MapAddArgs)(nil),           // 28: pipeline.MapAddArgs
	(*MapMultArgs)(nil),          // 29: pipeline.MapMultArgs
	(*LeftFoldArgs)(nil),         // 30: pipeline.LeftFoldArgs
	(*RightFoldArgs)(nil),        // 31: pipeline.RightFoldArgs
	(*MapRegexArgs)(nil),         // 32: pipeline.MapRegexArgs
	(*Transformation)(nil),       // 33: pipeline.Transformation
	(*ExistsOperation)(nil),      // 34: pipeline.ExistsOperation
	(*ExistsExpression)(nil),     // 35: pipeline.ExistsExpression
	(*BooleanExpression)(nil),    // 36: pipeline.BooleanExpression
	(*Variable)(nil),             // 37: pipeline.Variable
	(*Operand)(nil),              // 38: pipeline.Operand
	(*ComparatorExpression)(nil), // 39: pipeline.ComparatorExpression
	(*LogicalExpression)(nil),    // 40: pipeline.LogicalExpression
	(*BinaryExpression)(nil),     // 41: pipeline.BinaryExpression
	(*UnaryExpression)(nil),      // 42: pipeline.UnaryExpression
	(*Expression)(nil),           // 43: pipeline.Expression
	(*Condition)(nil),            // 44: pipeline.Condition
	(*External)(nil),             // 45: pipeline.External
}
var file_pipeline_proto_depIdxs = []int32{
	11, // 0: pipeline.Pipelines.pipelines:type_name -> pipeline.Pipeline
	13, // 1: pipeline.Pipelines.processDefinitions:type_name -> pipeline.ProcessDefinition
	45, // 2: pipeline.Pipelines.externalSystems:type_name -> pipeline.External
	12, // 3: pipeline.Pipeline.processes:type_name -> pipeline.PipelineProcess
	0,  // 4: pipeline.PipelineProcess.processType:type_name -> pipeline.ProcessType
	14, // 5: pipeline.ProcessDefinition.annotator:type_name -> pipeline.Annotator
	16, // 6: pipeline.ProcessDefinition.aggregator:type_name -> pipeline.Aggregator
	18, // 7: pipeline.ProcessDefinition.completer:type_name -> pipeline.Completer
	20, // 8: pipeline.ProcessDefinition.filter:type_name -> pipeline.Filter
	21, // 9: pipeline.ProcessDefinition.spawner:type_name -> pipeline.Spawner
	24, // 10: pipeline.ProcessDefinition.tee:type_name -> pipeline.Tee
	25, // 11: pipeline.ProcessDefinition.transformer:type_name -> pipeline.Transformer
	15, // 12: pipeline.Annotator.annotations:type_name -> pipeline.Annotation
	44, // 13: pipeline.Annotation.condition:type_name -> pipeline.Condition
	44, // 14: pipeline.Aggregator.condition:type_name -> pipeline.Condition
	17, // 15: pipeline.Aggregator.aggregation:type_name -> pipeline.Aggregation
	2,  // 16: pipeline.Aggregation.aggregationType:type_name -> pipeline.AggregationType
	44, // 17: pipeline.Completer.condition:type_name -> pipeline.Condition
	19, // 18: pipeline.Completer.completion:type_name -> pipeline.Completion
	44, // 19: pipeline.Spawner.condition:type_name -> pipeline.Condition
	23, // 20: pipeline.Spawner.job:type_name -> pipeline.Job
	22, // 21: pipeline.Job.runnable:type_name -> pipeline.Runnable
	44, // 22: pipeline.Tee.condition:type_name -> pipeline.Condition
	26, // 23: pipeline.Tee.transformerSpecs:type_name -> pipeline.TransformerSpec
	1,  // 24: pipeline.Tee.externalType:type_name -> pipeline.ExternalType
	26, // 25: pipeline.Transformer.specs:type_name -> pipeline.TransformerSpec
	33, // 26: pipeline.TransformerSpec.transformation:type_name -> pipeline.Transformation
	44, // 27: pipeline.Transformation.condition:type_name -> pipeline.Condition
	3,  // 28: pipeline.Transformation.transformationType:type_name -> pipeline.TransformationType
	27, // 29: pipeline.Transformation.mapArgs:type_name -> pipeline.MapArgs
	28, // 30: pipeline.Transformation.mapAddArgs:type_name -> pipeline.MapAddArgs
	29, // 31: pipeline.Transformation.mapMultArgs:type_name -> pipeline.MapMultArgs
	32, // 32: pipeline.Transformation.mapRegexArgs:type_name -> pipeline.MapRegexArgs
	30, // 33: pipeline.Transformation.leftFoldArgs:type_name -> pipeline.LeftFoldArgs
	31, // 34: pipeline.Transformation.rightFoldArgs:type_name -> pipeline.RightFoldArgs
	5,  // 35: pipeline.ExistsOperation.op:type_name -> pipeline.ExistsOperator
	34, // 36: pipeline.ExistsExpression.ops:type_name -> pipeline.ExistsOperation
	43, // 37: pipeline.Operand.expression:type_name -> pipeline.Expression
	37, // 38: pipeline.Operand.variable:type_name -> pipeline.Variable
	38, // 39: pipeline.ComparatorExpression.lhs:type_name -> pipeline.Operand
	38, // 40: pipeline.ComparatorExpression.rhs:type_name -> pipeline.Operand
	9,  // 41: pipeline.ComparatorExpression.op:type_name -> pipeline.ComparatorOperator
	38, // 42: pipeline.LogicalExpression.lhs:type_name -> pipeline.Operand
	38, // 43: pipeline.LogicalExpression.rhs:type_name -> pipeline.Operand
	8,  // 44: pipeline.LogicalExpression.op:type_name -> pipeline.LogicalOperator
	38, // 45: pipeline.BinaryExpression.lhs:type_name -> pipeline.Operand
	38, // 46: pipeline.BinaryExpression.rhs:type_name -> pipeline.Operand
	7,  // 47: pipeline.BinaryExpression.op:type_name -> pipeline.BinaryOperator
	38, // 48: pipeline.UnaryExpression.rhs:type_name -> pipeline.Operand
	6,  // 49: pipeline.UnaryExpression.op:type_name -> pipeline.UnaryOperator
	36, // 50: pipeline.Expression.boolean:type_name -> pipeline.BooleanExpression
	39, // 51: pipeline.Expression.comparator:type_name -> pipeline.ComparatorExpression
	40, // 52: pipeline.Expression.logical:type_name -> pipeline.LogicalExpression
	41, // 53: pipeline.Expression.binary:type_name -> pipeline.BinaryExpression
	42, // 54: pipeline.Expression.unary:type_name -> pipeline.UnaryExpression
	43, // 55: pipeline.Condition.expression:type_name -> pipeline.Expression
	35, // 56: pipeline.Condition.exists:type_name -> pipeline.ExistsExpression
	1,  // 57: pipeline.External.externalType:type_name -> pipeline.ExternalType
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_pipeline_proto_init() }
func file_pipeline_proto_init() {
	if File_pipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipelines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggregation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spawner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformerSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapAddArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMultArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftFoldArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RightFoldArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRegexArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparatorExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicalExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pipeline_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*External); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pipeline_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ProcessDefinition_Annotator)(nil),
		(*ProcessDefinition_Aggregator)(nil),
		(*ProcessDefinition_Completer)(nil),
		(*ProcessDefinition_Filter)(nil),
		(*ProcessDefinition_Spawner)(nil),
		(*ProcessDefinition_Tee)(nil),
		(*ProcessDefinition_Transformer)(nil),
	}
	file_pipeline_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Transformation_MapArgs)(nil),
		(*Transformation_MapAddArgs)(nil),
		(*Transformation_MapMultArgs)(nil),
		(*Transformation_MapRegexArgs)(nil),
		(*Transformation_LeftFoldArgs)(nil),
		(*Transformation_RightFoldArgs)(nil),
	}
	file_pipeline_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*Operand_Expression)(nil),
		(*Operand_Variable)(nil),
		(*Operand_Literal)(nil),
		(*Operand_Numeric)(nil),
	}
	file_pipeline_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Expression_Boolean)(nil),
		(*Expression_Comparator)(nil),
		(*Expression_Logical)(nil),
		(*Expression_Binary)(nil),
		(*Expression_Unary)(nil),
	}
	file_pipeline_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Condition_Expression)(nil),
		(*Condition_Exists)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pipeline_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pipeline_proto_goTypes,
		DependencyIndexes: file_pipeline_proto_depIdxs,
		EnumInfos:         file_pipeline_proto_enumTypes,
		MessageInfos:      file_pipeline_proto_msgTypes,
	}.Build()
	File_pipeline_proto = out.File
	file_pipeline_proto_rawDesc = nil
	file_pipeline_proto_goTypes = nil
	file_pipeline_proto_depIdxs = nil
}
